@inherits UmbracoViewPage<BlockListItem>

@{
    var row = (CarouselRow)Model.Content;
    var settings = (CarouselRowSettings)Model.Settings;

    if (settings?.Hide ?? false) return;
    if (row.CarouselItems == null || !row.CarouselItems.Any()) return;

    var carouselId = "carousel-" + row.Key;
    //var headingId = carouselId + "-heading-" + index;

}

<div id="@carouselId" class="carousel slide" data-bs-ride="carousel">
    @{
        var itemCount = row.CarouselItems.Count;
        
        <div class="carousel-indicators">
            @for(var i = 0; i< itemCount; i++)
            {
                var isFirst = i == 0;
                <button type="button" data-bs-target="#@carouselId" data-bs-slide-to="@i" class="@(isFirst ? "active" : null)" aria-current="@isFirst" aria-label="Slide @(i + 1)"></button>
            }
        </div>
    }

    <div class="carousel-inner">
        @{
            var itemIndex = 0;

            foreach (var item in row.CarouselItems)
            {
                var rowItem = (CarouselItem)item.Content;
                var rowSettings = (CarouselItemSettings)item.Settings;
                if (rowSettings.Hide) continue;

                var isFirstSlide = itemIndex == 0;
                var hasTitle = !string.IsNullOrWhiteSpace(rowItem.Title);
                var hasDescription = !string.IsNullOrWhiteSpace(rowItem.Description);

                <div class="carousel-item @(isFirstSlide ? "active" : null)">
                    @if (rowItem.Image != null)
                    {
                        <img src="@rowItem.Image.GetCropUrl(width: 900, height:500)" class="d-block w-100" alt="@rowItem.Image.Name">
                    }

                    @if (hasTitle || hasDescription)
                    {
                        <div class="carousel-caption d-none d-md-block">
                            @if (hasTitle)
                            {
                                <h5>@rowItem.Title</h5>
                            }
                            @if (hasDescription)
                            {
                                <p>@rowItem.Description</p>
                            }
                        </div>
                    }
                </div>

                itemIndex++;
            }
        }
    </div>
    <button class="carousel-control-prev" type="button" data-bs-target="#@carouselId" data-bs-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#@carouselId" data-bs-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Next</span>
    </button>
</div>
